{# Only include the tag section if vm.tags exists and is not empty #}
{% if vm is defined and vm.tags is defined and vm.tags and vm.tags.strip() %}
{% for tag in vm.tags.replace(',', ' ').split() %}
resource "digitalocean_tag" "bitor_tag_{{ loop.index }}" {
  name = "{{ tag | trim }}"
}
{% endfor %}
{% endif %}

resource "tls_private_key" "ssh_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "digitalocean_ssh_key" "terraform_ssh_key" {
  name       = "bitor-terraform-{{ scan_id }}"
  public_key = tls_private_key.ssh_key.public_key_openssh
}

resource "digitalocean_droplet" "vm" {
  image = "{{ do_image | default(vm_default_do_image) }}"
  name = "{{ 'vm-' + scan_id }}"
  region = "{{ vm.do_region|default(vm_default_do_region) }}"
  size = "{{ vm.do_size|default(vm_default_do_size) }}"
  {% if vm is defined and vm.tags is defined and vm.tags and vm.tags.strip() %}
  tags = [{% for tag in vm.tags.replace(',', ' ').split() %}digitalocean_tag.bitor_tag_{{ loop.index }}.id,{% endfor %}]
  {% endif %}
  user_data = "${file("cloud-init-do.yaml")}"
  ssh_keys = [
    digitalocean_ssh_key.terraform_ssh_key.fingerprint
  ]
}

resource "digitalocean_firewall" "firewall" {
  name = "{{ 'firewall-' + scan_id }}"

  droplet_ids = [digitalocean_droplet.vm.id]
  inbound_rule {
    protocol         = "tcp"
    port_range       = "22"
    source_addresses = ["0.0.0.0/0"]
  }
  outbound_rule {
    protocol         = "udp"
    port_range       = "1-65535"
    destination_addresses = ["0.0.0.0/0"]
  }
  outbound_rule {
    protocol         = "tcp"
    port_range       = "1-65535"
    destination_addresses = ["0.0.0.0/0"]
  }
}